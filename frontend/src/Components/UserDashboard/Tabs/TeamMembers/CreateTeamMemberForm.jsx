import { useState } from 'react';
import {
    useCreateTeamMemberMutation,
    useCreateUserMutation,
    useCheckUserExistsMutation,
    useFetchBusinessesQuery,
} from '../../../../store';

import SubmitButton from '../../../../utils/SubmitButton';
import PhoneInputField from '../../../../utils/PhoneInput';

function generateStrongPassword(length = 12) {
    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()_-+=<>?';
    let password = '';
    const array = new Uint32Array(length);
    window.crypto.getRandomValues(array);
    for (let i = 0; i < length; i++) {
        password += charset[array[i] % charset.length];
    }
    return password;
}

export default function CreateTeamMemberModal({ token, showModal, setShowModal }) {
    const [name, setName] = useState('');
    const [phone, setPhone] = useState('');
    const [email, setEmail] = useState('');
    const [role, setRole] = useState('EMPLOYEE');
    const [jobDuties, setJobDuties] = useState('');
    const [expertise, setExpertise] = useState('');

    const [apiError, setApiError] = useState(null);
    const [successMessage, setSuccessMessage] = useState('');

    const [createUser, { isLoading: isUserLoading }] = useCreateUserMutation();
    const [createTeamMember, { isLoading: isTeamMemberLoading }] = useCreateTeamMemberMutation();
    const [checkUserExists, { isLoading: isCheckingUser }] = useCheckUserExistsMutation();
    const { data: businesses } = useFetchBusinessesQuery(undefined, { skip: !token });

    const isSubmitting = isUserLoading || isTeamMemberLoading || isCheckingUser;

    const handleSubmit = async (e) => {
        e.preventDefault();
        setApiError(null);
        setSuccessMessage('');

        if (!name || !email || !phone) {
            setApiError('Please fill all required fields.');
            return;
        }

        try {
            const checkResponse = await checkUserExists({ email }).unwrap();
            let userId = checkResponse?.id;

            if (!userId) {
                const password = generateStrongPassword();
                const userPayload = { name, email, phone, password, role };
                const newUser = await createUser(userPayload).unwrap();
                userId = newUser.id;
            }

            const businessId = businesses?.[0]?.id;
            if (!businessId) throw new Error('No business found for the current user.');

            await createTeamMember({
                business: businessId,
                employee: userId,
                job_duties: jobDuties,
                expertise,
            }).unwrap();

            setSuccessMessage('Team member added successfully.');
            setName('');
            setPhone('');
            setEmail('');
            setRole('EMPLOYEE');
            setJobDuties('');
            setExpertise('');
            setShowModal(false);
        } catch (err) {
            console.error('Create team member error:', err);

            setApiError('Something went wrong while adding the team member. Please try again.');
        }
    };

    return (
        <>
            {showModal && (
                <div className="modal d-block" tabIndex="-1" role="dialog">
                    <div className="modal-dialog" role="document">
                        <div className="modal-content">
                            <div className="modal-header">
                                <h5 className="modal-title">Add New Member</h5>
                                <button
                                    type="button"
                                    className="btn-close"
                                    onClick={() => setShowModal(false)}
                                ></button>
                            </div>

                            <form onSubmit={handleSubmit}>
                                <div className="modal-body">
                                    <p className="p-2 bg-light rounded">
                                        Please note: Login credentials will be generated by our internal system. A
                                        confirmation link will be sent to the email address provided. Team members will
                                        need to set their own password by using the "Forgot Password" option on the
                                        sign-in page.
                                    </p>

                                    {apiError && <div className="alert alert-danger mb-3">{apiError}</div>}
                                    {successMessage && <div className="alert alert-success mb-3">{successMessage}</div>}

                                    <div className="row">
                                        <div className="mb-3 col-md-6">
                                            <label className="form-label">Name (*)</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={name}
                                                onChange={(e) => setName(e.target.value)}
                                                required
                                            />
                                        </div>
                                        <div className="mb-3 col-md-6">
                                            <label className="form-label">Email (*)</label>
                                            <input
                                                type="email"
                                                className="form-control"
                                                value={email}
                                                onChange={(e) => setEmail(e.target.value)}
                                                required
                                            />
                                        </div>
                                        <div className="mb-3 col-md-6">
                                            <label className="form-label">Phone (*)</label>
                                            <PhoneInputField value={phone} setValue={setPhone} />
                                        </div>
                                        <div className="mb-3 col-md-6">
                                            <label className="form-label">Role (*)</label>
                                            <select
                                                className="form-select"
                                                value={role}
                                                onChange={(e) => setRole(e.target.value)}
                                                required
                                            >
                                                <option value="EMPLOYEE">Employee</option>
                                                <option value="MANAGER">Manager</option>
                                            </select>
                                        </div>
                                        <div className="mb-3 col-md-12">
                                            <label className="form-label">Job Duties</label>
                                            <textarea
                                                className="form-control"
                                                rows="3"
                                                value={jobDuties}
                                                onChange={(e) => setJobDuties(e.target.value)}
                                            ></textarea>
                                        </div>
                                        <div className="mb-3 col-md-12">
                                            <label className="form-label">Expertise</label>
                                            <input
                                                type="text"
                                                className="form-control"
                                                value={expertise}
                                                onChange={(e) => setExpertise(e.target.value)}
                                                placeholder="e.g., Plumbing, Electrical Work"
                                            />
                                        </div>
                                    </div>
                                </div>

                                <div className="modal-footer">
                                    <button
                                        type="button"
                                        className="btn btn-sm btn-dark"
                                        onClick={() => setShowModal(false)}
                                        disabled={isSubmitting}
                                    >
                                        Cancel
                                    </button>
                                    <SubmitButton
                                        isLoading={isSubmitting}
                                        btnClass="btn btn-sm btn-success"
                                        btnName="Add Member"
                                    />
                                </div>
                            </form>
                        </div>
                    </div>
                </div>
            )}
            {showModal && <div className="modal-backdrop fade show"></div>}
        </>
    );
}
